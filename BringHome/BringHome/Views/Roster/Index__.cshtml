@model IEnumerable<BringHome.Models.tbl_r_dept>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="content-header">
    <div class="row">
        <div class="col-sm-6">
            <div class="header-section">
                <h1>Roster Karyawan</h1>
            </div>
        </div>
        <div class="col-sm-6 hidden-xs">
            <div class="header-section">
                <ul class="breadcrumb breadcrumb-top">
                    <li>User Interface</li>
                    <li>Forms</li>
                    <li><a href="">Components</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="block">
            <div class="block-title">
                <h2>Data Karyawan</h2>
            </div>

            <!-- Table Styles Block -->
            <div class="block">
                <!-- Table Styles Content -->
                <div class="table-responsive">
                    <!--
                    Available Table Classes:
                        'table'             - basic table
                        'table-bordered'    - table with full borders
                        'table-borderless'  - table with no borders
                        'table-striped'     - striped table
                        'table-condensed'   - table with smaller top and bottom cell padding
                        'table-hover'       - rows highlighted on mouse hover
                        'table-vcenter'     - middle align content vertically
                    -->
                    <table id="table-roster" class="table table-striped table-bordered table-vcenter"></table>
                </div>
                <!-- END Table Styles Content -->
            </div>
            <!-- END Table Styles Block -->
        </div>
        <!-- Datatables Block -->
    </div>
</div>


<script>
    App.datatables();
    var link = '@Url.Action("Function", "Controller")';
    var rosterListName = [], rosterList = [];

    $(document).ready(function () {
        init();
    });

    async function init() {
        await getList();
        await getRoster();
        
        var xx = jeketek();
        console.log("==>", xx)
        await getAll();
    }

    var getAll = async () => {
        console.log("rosterListName:", rosterListName);
        console.log("rosterList:", rosterList);
        let cols = [
            { "title": "NIK", "data": "nik" },
            { "title": "NAMA", "data": "nama", "width": 120 },
            { "title": "JABATAN", "data": "jabatan", "width": 140 },
        ];

        let dataRoster = [];
        
        let tgl = getDaysInMonth(5, 2024);
        console.log("--->",tgl);

        rosterListName.forEach(function (x, i) {
            console.log("nama:", x);
            dataRoster.push({
                "nik": x.nik,
                "nama": x.nama,
                "jabatan": x.jabatan
            });
            tgl.forEach(function (dt) {
                //let dtFormat = new Date(dt).toISOString().split('T')[0];
                let dtFormat = formatDate(new Date(dt));
                // console.log("dtFormat:", dtFormat);
                // let rost = rosterList.find((f) => f.tanggal.split('T')[0] == dtFormat);
                // console.log("rost:", rost)

                rosterList.forEach((o) => {
                    if (o.nik == x.nik) {
                        if (o.tanggal.split('T')[0] == dtFormat) {
                            console.log("ada:", i);
                            console.log("====>>", o.tanggal.split('T')[0], dtFormat, o.tanggal.split('T')[0] == dtFormat, o)
                            dataRoster[i][o.tanggal.split('T')[0]] = o.status ?? "-";
                        }
                    }
                })
            });
        })

        // generate columns
        console.log("dataRoster:", dataRoster)
        tgl.forEach(function (x) {
            // console.log("--->>", new Date(x).toISOString().split('T')[0])
            let dateCol = formatDate(new Date(x));
            //dateCol.setDate(dateCol.getDate() + 1)
            cols.push({
                "title": x.getDate().toString(),
                "data": dateCol//dateCol.toISOString().split('T')[0]
            })
        });

        cols.push({
            "data": "nik",
            "render": function (data) {
                // var a = '<a href="javascript:void(0)" data-toggle="tooltip" title="Edit User" class="btn btn-effect-ripple btn-sm btn-success"><i class="fa fa-pencil"></i>';
                var a = '<div class="text-center"><a href="/Roster/Detail/' + data + '" data-toggle="tooltip" title="Edit User" class="btn btn-effect-ripple btn-sm btn-success"><i class="fa fa-pencil"></i></a></div>';
                return a
            },
            "orderable": false,
            "width": "180px",
            "searchable": false
        })

        console.log("cols:", cols)

        link = link.replace("Controller", "Roster");
        console.log("link:",link)
        link = link.replace("Function", "Gets");
        console.log("link:", link)

        dataTable = $("#table-roster").DataTable({
            /*"ajax": {
                "url": "@Url.Action("Gets", "Roster")",
                "type": "GET",
                "datatype": "json"
            },*/
            "data": dataRoster,
            "columns": cols,
            "language": {
                "emptyTable": "Tidak ada data"
            },
            "fixedColumns": {
                "start": 1,
                "end": 1
            },
        })
    }

    async function getRoster() {
        await $.get(`/Roster/GetRosters`, function (result) {
            rosterList = result.data;
            return result;
        });
        return [];
    }

    async function getList() {
        await $.get(`/Roster/GetList`, function (result) {
            rosterListName = result.data;
            return result;
        });
        return []
    }

    var jeketek = () => {
        return "good job";
    }

    var getDaysInMonth = (month, year) => {
        var date = new Date(year, month, 1);
        var days = [];
        while (date.getMonth() === month) {
            days.push(new Date(date));
            date.setDate(date.getDate() + 1);
        }
        return days;
    }

    function formatDate(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join('-');
    }
</script>
